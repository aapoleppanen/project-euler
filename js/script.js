//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
//The sum of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000.

function problem1(){
  var numArr = [];
  for(var x=0; x<1000; x++){
    if (x%3==0 || x%5==0){
      numArr.push(x);
    }
  }
  return numArr.reduce(function(a,b){
    return a + b;
  });
}

//Each new term in the Fibonacci sequence is generated by adding the previous two terms.
//By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million,
//find the sum of the even-valued terms.

function problem2(){
  var numArr = [1,2];
  while(numArr[numArr.length-1]<4000000){
    numArr.push( numArr[numArr.length - 2] + numArr[numArr.length - 1] );
  }
  numArr = numArr.filter(function(a){ return a%2===0});
  return numArr.reduce(function(a,b){ return a+b; });
}

//The prime factors of 13195 are 5, 7, 13 and 29.
//What is the largest prime factor of the number 600851475143 ?

function problem3(num){
  for(var x = 2; x<=num; x++){
    if(isPrime(x) !== true){
    }
    else if (num%x===0){
      num = num/x;
    }
    else if (isPrime(num) == true)
      return num;
  }
}

function isPrime(num) {
  for(var i = 2; i < num; i++)
    if(num % i === 0) return false;
  return num !== 1;
}


//A palindromic number reads the same both ways.
//The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

//Find the largest palindrome made from the product of two 3-digit numbers.

function problem4(){
    var palindromes = [];
    for(var x=10000; x<=998001; x++){
      if(x.toString() === x.toString().split("").reverse().join("")){
        palindromes.push(x);
      }
    }
    for(var z=palindromes.length-1; z>-1; z--){
      for(var y=999; y>=100;y--){
        if(palindromes[z]%y===0 && (palindromes[z]/y).toString().length === 3){
          return palindromes[z];
        }
      }
    }
}

// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

function problem5(){
  var sN = 0;
  c=false;
  while(c===false){
    sN+=380;
    for(var x=3; x<=18;x++){
      if(sN%x!==0){
        break;
      }
      if(sN%x==0 && x===18){
        c=true;
        return sN;
      }
    }
  }
}

// The sum of the squares of the first ten natural numbers is,
//
// 1^2 + 2^2 + ... + 10^2 = 385
// The square of the sum of the first ten natural numbers is,
//
// (1 + 2 + ... + 10)^2 = 55^2 = 3025
// Hence the difference between the sum of the squares of
// the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
//
// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

function problem6(){
  var numArr=[];
  var sqSum;
  var sumSq;
  for(var x=1; x<=100; x++){
    numArr.push(x);
  }
  sumSq = numArr.reduce(function(a,b){ return a+b; });
  sumSq = sumSq*sumSq;
  sqSum = numArr.map(function(a){ return a = a*a })
  sqSum = sqSum.reduce(function(a,b){ return a+b; });
  return sumSq - sqSum;
}

// What is the 10 001st prime number?

function problem7(){
  c=1;
  x=3;
  while( c < 10001 ){
    if(isPrime(x) === true){
      c++;
    }
    x+=2;
  }
  return x-2;
}

// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450
//
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

function problem8(){
  let numSeq = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
  let seqArr = [];
  let largestPr = 0
  for(let x = 0; x<numSeq.length-12; x++){
    seqArr.push(numSeq.slice(x, x+13));
  }
  for(let x = 0; x<seqArr.length; x++){
    let tempArr = seqArr[x].split('').map((a) => parseInt(a));
    if(tempArr.includes(0)){ continue; }
    let tempSum = tempArr.reduce((acc, curr) => acc*curr);
    if(tempSum>largestPr){
      largestPr = tempSum;
    }
  }
  return largestPr
}


$(document).ready(function(){
  console.time('prob1');
  $("td.solution1").text(problem1());
  console.timeEnd('prob1');

  console.time('prob2');
  $("td.solution2").text(problem2());
  console.timeEnd('prob2');

  console.time('prob3');
  $("td.solution3").text(problem3(600851475143));
  console.timeEnd('prob3');

  console.time('prob4');
  $("td.solution4").text(problem4());
  console.timeEnd('prob4');

  console.time('prob5');
  $("td.solution5").text(problem5());
  console.timeEnd('prob5');

  console.time('prob6');
  $("td.solution6").text(problem6());
  console.timeEnd('prob6');

  console.time('prob7');
  $("td.solution7").text(problem7());
  console.timeEnd('prob7');

  console.time('prob8');
  $("td.solution8").text(problem8());
  console.timeEnd('prob8');
});
